
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analizadores;

import java_cup.runtime.*;
import proyecto.*;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\053\000\002\002\004\000\002\002\007\000\002\004" +
    "\004\000\002\005\011\000\002\005\010\000\002\007\005" +
    "\000\002\007\005\000\002\007\005\000\002\007\005\000" +
    "\002\007\005\000\002\007\005\000\002\007\005\000\002" +
    "\007\005\000\002\007\005\000\002\007\004\000\002\007" +
    "\004\000\002\007\004\000\002\010\005\000\002\010\005" +
    "\000\002\010\005\000\002\010\004\000\002\010\004\000" +
    "\002\010\004\000\002\014\002\000\002\006\010\000\002" +
    "\015\002\000\002\006\007\000\002\003\004\000\002\003" +
    "\004\000\002\003\005\000\002\003\005\000\002\003\004" +
    "\000\002\016\002\000\002\003\006\000\002\003\003\000" +
    "\002\003\003\000\002\003\003\000\002\003\003\000\002" +
    "\011\005\000\002\011\003\000\002\012\003\000\002\013" +
    "\007\000\002\013\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\132\000\004\024\004\001\002\000\004\015\010\001" +
    "\002\000\004\002\006\001\002\000\004\002\001\001\002" +
    "\000\004\022\116\001\002\000\004\023\111\001\002\000" +
    "\006\013\014\015\013\001\002\000\006\013\104\022\uffff" +
    "\001\002\000\004\023\045\001\002\000\004\017\015\001" +
    "\002\000\026\004\020\006\022\014\021\024\026\027\025" +
    "\030\023\031\017\033\024\034\016\035\030\001\002\000" +
    "\030\004\uffdd\006\uffdd\014\uffdd\021\uffdd\024\uffdd\027\uffdd" +
    "\030\uffdd\031\uffdd\033\uffdd\034\uffdd\035\uffdd\001\002\000" +
    "\026\004\020\006\022\014\021\024\026\027\025\030\023" +
    "\031\017\033\024\034\016\035\030\001\002\000\026\004" +
    "\020\006\022\014\021\024\026\027\025\030\023\031\017" +
    "\033\024\034\016\035\030\001\002\000\030\004\uffdf\006" +
    "\uffdf\014\uffdf\021\uffdf\024\uffdf\027\uffdf\030\uffdf\031\uffdf" +
    "\033\uffdf\034\uffdf\035\uffdf\001\002\000\026\004\020\006" +
    "\022\014\021\024\026\027\025\030\023\031\017\033\024" +
    "\034\016\035\030\001\002\000\026\004\020\006\022\014" +
    "\021\024\026\027\025\030\023\031\017\033\024\034\016" +
    "\035\030\001\002\000\030\004\uffde\006\uffde\014\uffde\021" +
    "\uffde\024\uffde\027\uffde\030\uffde\031\uffde\033\uffde\034\uffde" +
    "\035\uffde\001\002\000\026\004\020\006\022\014\021\024" +
    "\026\027\025\030\023\031\017\033\024\034\016\035\030" +
    "\001\002\000\004\013\033\001\002\000\004\021\uffe8\001" +
    "\002\000\030\004\uffdc\006\uffdc\014\uffdc\021\uffdc\024\uffdc" +
    "\027\uffdc\030\uffdc\031\uffdc\033\uffdc\034\uffdc\035\uffdc\001" +
    "\002\000\004\021\032\001\002\000\006\013\uffe7\022\uffe7" +
    "\001\002\000\004\025\uffe1\001\002\000\004\025\035\001" +
    "\002\000\030\004\uffe0\006\uffe0\014\uffe0\021\uffe0\024\uffe0" +
    "\027\uffe0\030\uffe0\031\uffe0\033\uffe0\034\uffe0\035\uffe0\001" +
    "\002\000\026\004\020\006\022\014\021\024\026\027\025" +
    "\030\023\031\017\033\024\034\016\035\030\001\002\000" +
    "\030\004\uffe4\006\uffe4\014\uffe4\021\uffe4\024\uffe4\027\uffe4" +
    "\030\uffe4\031\uffe4\033\uffe4\034\uffe4\035\uffe4\001\002\000" +
    "\026\004\020\006\022\014\021\024\026\027\025\030\023" +
    "\031\017\033\024\034\016\035\030\001\002\000\030\004" +
    "\uffe3\006\uffe3\014\uffe3\021\uffe3\024\uffe3\027\uffe3\030\uffe3" +
    "\031\uffe3\033\uffe3\034\uffe3\035\uffe3\001\002\000\030\004" +
    "\uffe5\006\uffe5\014\uffe5\021\uffe5\024\uffe5\027\uffe5\030\uffe5" +
    "\031\uffe5\033\uffe5\034\uffe5\035\uffe5\001\002\000\030\004" +
    "\uffe6\006\uffe6\014\uffe6\021\uffe6\024\uffe6\027\uffe6\030\uffe6" +
    "\031\uffe6\033\uffe6\034\uffe6\035\uffe6\001\002\000\030\004" +
    "\uffe2\006\uffe2\014\uffe2\021\uffe2\024\uffe2\027\uffe2\030\uffe2" +
    "\031\uffe2\033\uffe2\034\uffe2\035\uffe2\001\002\000\004\013" +
    "\046\001\002\000\004\017\047\001\002\000\010\010\052" +
    "\012\051\032\053\001\002\000\004\021\103\001\002\000" +
    "\006\020\054\026\076\001\002\000\006\020\054\026\071" +
    "\001\002\000\006\020\054\026\055\001\002\000\010\010" +
    "\067\012\066\032\070\001\002\000\010\010\064\012\063" +
    "\032\065\001\002\000\006\020\057\021\ufff1\001\002\000" +
    "\010\010\061\012\060\032\062\001\002\000\006\020\ufff0" +
    "\021\ufff0\001\002\000\006\020\uffef\021\uffef\001\002\000" +
    "\006\020\uffee\021\uffee\001\002\000\004\021\ufff4\001\002" +
    "\000\004\021\ufff5\001\002\000\004\021\ufffa\001\002\000" +
    "\006\020\uffed\021\uffed\001\002\000\006\020\uffec\021\uffec" +
    "\001\002\000\006\020\uffeb\021\uffeb\001\002\000\010\010" +
    "\074\012\073\032\075\001\002\000\006\020\057\021\ufff2" +
    "\001\002\000\004\021\ufff7\001\002\000\004\021\ufffb\001" +
    "\002\000\004\021\ufff6\001\002\000\010\010\101\012\100" +
    "\032\102\001\002\000\006\020\057\021\ufff3\001\002\000" +
    "\004\021\ufffc\001\002\000\004\021\ufff9\001\002\000\004" +
    "\021\ufff8\001\002\000\006\013\ufffe\015\ufffe\001\002\000" +
    "\004\017\105\001\002\000\026\004\020\006\022\014\021" +
    "\024\026\027\025\030\023\031\017\033\024\034\016\035" +
    "\030\001\002\000\004\021\uffea\001\002\000\004\021\110" +
    "\001\002\000\006\013\uffe9\022\uffe9\001\002\000\004\013" +
    "\112\001\002\000\004\017\113\001\002\000\010\010\052" +
    "\012\051\032\053\001\002\000\004\021\115\001\002\000" +
    "\006\013\ufffd\015\ufffd\001\002\000\006\013\uffda\022\uffda" +
    "\001\002\000\006\013\123\022\121\001\002\000\004\025" +
    "\134\001\002\000\004\022\133\001\002\000\006\013\127" +
    "\025\uffd9\001\002\000\004\023\124\001\002\000\004\014" +
    "\125\001\002\000\004\021\126\001\002\000\006\013\uffd7" +
    "\025\uffd7\001\002\000\004\023\130\001\002\000\004\014" +
    "\131\001\002\000\004\021\132\001\002\000\006\013\uffd8" +
    "\025\uffd8\001\002\000\006\013\uffdb\022\uffdb\001\002\000" +
    "\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\132\000\004\002\004\001\001\000\006\004\006\005" +
    "\010\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\011\116\001\001\000\002\001\001\000\004\006\011\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\003\026\001\001\000\002\001\001\000\004\003" +
    "\043\001\001\000\004\003\042\001\001\000\002\001\001" +
    "\000\004\003\041\001\001\000\004\003\037\001\001\000" +
    "\002\001\001\000\004\003\035\001\001\000\002\001\001" +
    "\000\004\015\030\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\016\033\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\003\036\001\001\000" +
    "\002\001\001\000\004\003\040\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\007\047\001\001" +
    "\000\002\001\001\000\004\010\076\001\001\000\004\010" +
    "\071\001\001\000\004\010\055\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\003\105\001\001\000\004" +
    "\014\106\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\007\113\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\012\117\013\121\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  

    public static int contId=2;
    public static int contI=0;
    public static int contarbol = 1;
    public static String primeros = ""; 
    public static String ultimos = ""; 
    public static Nodo Raiz;
    public static ArrayList<String> siguientes = new ArrayList();
    public static ArrayList<String> hojas = new ArrayList();
    public static ArrayList<String> transiciones = new ArrayList();
    public static ArrayList<String> estados = new ArrayList();
    public static ArrayList<String> hojasauxiliar = new ArrayList();

    public static void graficarArbol(Nodo act, String nombre){
        FileWriter fichero = null;
        PrintWriter pw = null;
        try {
            fichero = new FileWriter("C:\\Users\\Fernando Armira\\Documents\\" + nombre + ".dot");
            pw = new PrintWriter(fichero);
            pw.println("digraph G{");
            pw.println("rankdir=UD");
            pw.println("concentrate=true");
            pw.println("node[shape=record]");
            //System.out.println("primeros:" + primeros);
            pw.println("struct0[ label =\" {N|{" + primeros + "|.|" + (contI + 1) + "}|} \"];");
            pw.println("struct1[ label =\" {N|{" + (contI + 1) + "|#|" + (contI + 1) + "} |" + (contI + 1) + "} \"];");
            pw.println(act.getCodigoInterno());
            pw.println("struct0->struct" + (contId - 1));
            pw.println("struct0->struct1");
            pw.println("}");
            //siguientes.add(ultimos + "-" + Integer.toString(contI + 1) );
            siguientes(ultimos,Integer.toString(contI + 1));
            System.out.println("Archivo Arbol generado correctamente");
        } catch (Exception e) {
            System.out.println("error, no se realizo el archivo");
        } finally {
            try {
                if (null != fichero) {
                    fichero.close();
                }
            } catch (Exception e2) {
                e2.printStackTrace();
            }
        }
        //para compilar el archivo dot y obtener la imagen
        try {
            //dirección doonde se ecnuentra el compilador de graphviz
            String dotPath = "C:\\Program Files (x86)\\Graphviz2.38\\bin\\dot.exe";
            //dirección del archivo dot
            String fileInputPath = "C:\\Users\\Fernando Armira\\Documents\\" + nombre + ".dot";
            //dirección donde se creara la magen
            String fileOutputPath = "C:\\Users\\Fernando Armira\\Documents\\" +nombre+ ".jpg";
            //tipo de conversón
            String tParam = "-Tjpg";
            String tOParam = "-o";

            String[] cmd = new String[5];
            cmd[0] = dotPath;
            cmd[1] = tParam;
            cmd[2] = fileInputPath;
            cmd[3] = tOParam;
            cmd[4] = fileOutputPath;

            Runtime rt = Runtime.getRuntime();

            rt.exec(cmd);

            graficarSiguientes("siguientes" + Integer.toString(parser.contarbol));

            contId=2;
            contI=0;
            primeros = "";
            ultimos = "";

        } catch (Exception ex) {
            ex.printStackTrace();
        } finally {
        }
    }

    public static void graficarSiguientes(String nombre){
        FileWriter fichero = null;
        PrintWriter pw = null;
        try {
            fichero = new FileWriter("C:\\Users\\Fernando Armira\\Documents\\" + nombre + ".dot");
            pw = new PrintWriter(fichero);
            pw.println("digraph H{");
            pw.println("parent [");
            pw.println("shape=plaintext");
            pw.println("label=<");
            pw.println("<table border=\'1\' cellborder=\'1\'>");
            pw.println("<tr><td>Hoja</td><td>Numero</td><td>Siguientes</td></tr>");   
            for(int i = 0;i < siguientes.size();i++){
                String valor = "";
                String[] parts = siguientes.get(i).split("-");
                for(int j = 0;j < hojas.size();j++){
                    String[] parts2 = hojas.get(j).split("-");
                    if(parts[0].equals(parts2[0])){
                        valor = parts2[1];
                        j = hojas.size();
                    }
                }
                pw.println("<tr><td>" + valor + "</td><td>" + parts[0]  + "</td><td>" + parts[1] + "</td></tr>");
                //System.out.println(siguientes.get(i));      
            }
            pw.println("<tr><td>#</td><td>"+ (contI + 1 )+ "</td><td> - </td></tr>");
            pw.println("</table>");
            pw.println(">];");
            pw.println("}");
            System.out.println("Archivo Siguientes generado correctamente");
        } catch (Exception e) {
            System.out.println("error, no se realizo el archivo");
        } finally {
            try {
                if (null != fichero) {
                    fichero.close();
                }
            } catch (Exception e2) {
                e2.printStackTrace();
            }
        }
        //para compilar el archivo dot y obtener la imagen
        try {
            //dirección doonde se ecnuentra el compilador de graphviz
            String dotPath = "C:\\Program Files (x86)\\Graphviz2.38\\bin\\dot.exe";
            //dirección del archivo dot
            String fileInputPath = "C:\\Users\\Fernando Armira\\Documents\\" + nombre + ".dot";
            //dirección donde se creara la magen
            String fileOutputPath = "C:\\Users\\Fernando Armira\\Documents\\" +nombre+ ".jpg";
            //tipo de conversón
            String tParam = "-Tjpg";
            String tOParam = "-o";

            String[] cmd = new String[5];
            cmd[0] = dotPath;
            cmd[1] = tParam;
            cmd[2] = fileInputPath;
            cmd[3] = tOParam;
            cmd[4] = fileOutputPath;

            Runtime rt = Runtime.getRuntime();

            rt.exec(cmd);

            transicion();
            graficarTransiciones("transiciones" + Integer.toString(parser.contarbol));

            siguientes.clear();
            hojas.clear();
            transiciones.clear();
            estados.clear();
            hojasauxiliar.clear();

        } catch (Exception ex) {
            ex.printStackTrace();
        } finally {
        }
    }

public static void graficarTransiciones(String nombre){
        //int contador= 0;
        FileWriter fichero = null;
        PrintWriter pw = null;
        try {
            fichero = new FileWriter("C:\\Users\\Fernando Armira\\Documents\\" + nombre + ".dot");
            pw = new PrintWriter(fichero);
            /*for(int i = 0;i < transiciones.size();i++){
                pw.println(transiciones.get(i));
            */
            pw.println("digraph H{");
            pw.println("parent [");
            pw.println("shape=plaintext");
            pw.println("label=<");
            pw.println("<table border=\'1\' cellborder=\'1\'>");
            pw.println("<tr><td>Estado</td>");
            //Encabezado
            for(int i = 0;i < hojas.size();i++){
                boolean hestado = true;
                String[] part = hojas.get(i).split("-");
                for(int j = 0;j < hojas.size();j++){
                    String[] part2 = hojas.get(j).split("-");
                    //System.out.println(part[1]+ " COMPARANDO " + part2[1]);
                    if(part[1].equals(part2[1]) && j!=i && j <= i){
                        //System.out.println("Ya existe hoja");
                        hestado = false;
                        j=hojas.size();
                    }else if(j == i){
                        j=hojas.size();
                    } 
                }
                if(hestado == true){
                    System.out.println(part[1]);
                    pw.println("<td>" + part[1] + "</td>");
                    hojasauxiliar.add(part[1]);
                    //contador++;
                }
            }
            pw.println("</tr>");

            for(int i = 0;i < estados.size();i++){ // filas
                pw.println("<tr><td>" + estados.get(i) + "</td>");
                String estadoaux = estados.get(i);
                //System.out.println("Fila " + estados.get(i));
                for(int j = 0;j < hojasauxiliar.size();j++){ // columnas
                boolean transicion = false;
                String hojaux = hojasauxiliar.get(j);
                //System.out.println("Columna" + j);
                    for(int k = 0;k < transiciones.size();k++){  //buscar en array de trancisiones
                        String aux = "";
                        String[] part = transiciones.get(k).split("-");
                        //System.out.println(transiciones.get(k));
                        for(int l = 0;l < hojas.size();l++){ //buscar valor de la hoja
                            String[] part2 = hojas.get(l).split("-");
                            if(part[0].equals(part2[0])){
                                aux = part2[1];
                                l = hojas.size();
                                //System.out.println(aux);
                            }  
                        }
                       if(part[2].equals(estadoaux) && aux.equals(hojaux)){
                            pw.println("<td>" + part[3] +"</td>");
                            transicion = true;
                       }
                    }
                    if(transicion == false){
                        pw.println("<td> - </td>");
                    }
                }
                pw.println("</tr>");
            }
            pw.println("</table>");
            pw.println(">];");
            pw.println("}");
            System.out.println("Archivo Transiciones generado correctamente");
        } catch (Exception e) {
            System.out.println("error, no se realizo el archivo");
        } finally {
            try {
                if (null != fichero) {
                    fichero.close();
                }
            } catch (Exception e2) {
                e2.printStackTrace();
            }
        }
        //para compilar el archivo dot y obtener la imagen
        try {
            //dirección doonde se ecnuentra el compilador de graphviz
            String dotPath = "C:\\Program Files (x86)\\Graphviz2.38\\bin\\dot.exe";
            //dirección del archivo dot
            String fileInputPath = "C:\\Users\\Fernando Armira\\Documents\\" + nombre + ".dot";
            //dirección donde se creara la magen
            String fileOutputPath = "C:\\Users\\Fernando Armira\\Documents\\" +nombre+ ".jpg";
            //tipo de conversón
            String tParam = "-Tjpg";
            String tOParam = "-o";

            String[] cmd = new String[5];
            cmd[0] = dotPath;
            cmd[1] = tParam;
            cmd[2] = fileInputPath;
            cmd[3] = tOParam;
            cmd[4] = fileOutputPath;

            Runtime rt = Runtime.getRuntime();

            rt.exec(cmd);


        } catch (Exception ex) {
            ex.printStackTrace();
        } finally {
        }
    }

    public static void siguientes(String hoja, String siguiente){
        String[] parts = hoja.split(",");
        boolean estado = true;
            for(int i=0; i< parts.length; i++){            
            for(int j = 0;j < siguientes.size();j++){ // Recorrer la lista
                String[] parts2 = siguientes.get(j).split("-");
                //System.out.println(parts[i] + " COMPARANDO " + parts2[0]);
                if(parts[i].equals(parts2[0])){
                    //System.out.println("Ya existe el nodo");
                    //Add a la lista
                    //System.out.println(siguientes.get(j) + "," + siguiente);
                    siguientes.set(j, siguientes.get(j) + "," + siguiente);
                    estado = false;
                    j = siguientes.size();
                }
            }
            if(estado == true){
                //System.out.println("No existe el nodo");
                //Add a la lista
                //System.out.println(parts[i] + "-" + siguiente);
                siguientes.add(parts[i] + "-" + siguiente);
            }
            }
 
    }

    public static void transicion(){
        int cestado = 0;
        int testado = 1;
        String[] parts = primeros.split(",");
        //System.out.println("raiz");
        //System.out.println(primeros);
        //For solo para primeros
        for(int i=0; i< parts.length; i++){
            for(int j = 0;j < siguientes.size();j++){
                String[] parts2 = siguientes.get(j).split("-");
                if(parts[i].equals(parts2[0])){
                    transiciones.add(siguientes.get(j) + "-S" + cestado);
                    //System.out.println(siguientes.get(j));
                    j = siguientes.size();
                }
                     
            }    
        }
        
        estados.add("S" + cestado);
        cestado++;
        
        //Cada transicion
        for(int i = 0;i < transiciones.size();i++){
                boolean estado = true;
                //System.out.println("Demas transiciones " + i);
                //System.out.println(transiciones.get(i));
                String[] part = transiciones.get(i).split("-");
                for(int j = 0;j < transiciones.size() ;j++){
                    //System.out.println("Entrando a for" + i + "-" + j);
                    String[] parts2 = transiciones.get(j).split("-");
                    //System.out.println(part[1] + " COMPARANDO " + parts2[1]);
                    if(part[1].equals(parts2[1]) && j != i  && j<= i){
                        //System.out.println("Ya existe transicion");
                        estado = false;
                        transiciones.set(i,transiciones.get(i) + "-" +parts2[3]);
                        j = transiciones.size();
                    }else if (j == i){
                        j = transiciones.size();
                    }
                }
                if(estado == true){
                    transiciones.set(i,transiciones.get(i) + "-S" + testado);
                    testado++;
                    String[] parts3 = part[1].split(",");
                    for(int k=0; k< parts3.length; k++){
                        for(int l = 0;l < siguientes.size();l++){
                            String[] parts4 = siguientes.get(l).split("-");
                            if(parts3[k].equals(parts4[0])){
                                transiciones.add(siguientes.get(l) + "-S" + cestado);
                                //System.out.println(siguientes.get(l));
                                l = siguientes.size();
                            }
                     
                        }
                    }
                    estados.add("S" + cestado);
                    cestado++;
                }
     
        }
              
    }
     

    //-----------------------------------------para errores sintacticos-------------------------------------------------------------------------------------------
    public void syntax_error(Symbol s)
    {
        System.err.println("Error Sintactico en la Línea " + (s.right+1) +" Columna "+(s.left+1)+ ". Identificador "+s.value + " no reconocido. Se ha recuperado del error." );
    }
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {
        System.err.println("Error Sintactico en la Línea " + (s.right+1)+ " Columna "+(s.left+1)+". Identificador " +s.value + " no reconocido.");
    }
    //-------------------------------------------------------------------------------------------------------------------------------------------8


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {



  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo start_val = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= llaveiz BLOQUE1 BLOQUE2 BLOQUE3 llaveder 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // BLOQUE1 ::= DEFCONJ DEFEXPR 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE1",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // DEFCONJ ::= DEFCONJ conj dpuntos id flecha NOTACION puntocoma 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFCONJ",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // DEFCONJ ::= conj dpuntos id flecha NOTACION puntocoma 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFCONJ",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // NOTACION ::= letra sconj letra 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NOTACION",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // NOTACION ::= entero sconj entero 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NOTACION",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // NOTACION ::= simbolo sconj simbolo 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NOTACION",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // NOTACION ::= letra sconj entero 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NOTACION",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // NOTACION ::= letra sconj simbolo 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NOTACION",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // NOTACION ::= entero sconj letra 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NOTACION",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // NOTACION ::= entero sconj simbolo 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NOTACION",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // NOTACION ::= simbolo sconj entero 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NOTACION",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // NOTACION ::= simbolo sconj letra 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NOTACION",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // NOTACION ::= letra NOTACION2 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NOTACION",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // NOTACION ::= entero NOTACION2 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NOTACION",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // NOTACION ::= simbolo NOTACION2 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NOTACION",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // NOTACION2 ::= NOTACION2 coma letra 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NOTACION2",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // NOTACION2 ::= NOTACION2 coma entero 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NOTACION2",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // NOTACION2 ::= NOTACION2 coma simbolo 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NOTACION2",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // NOTACION2 ::= coma letra 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NOTACION2",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // NOTACION2 ::= coma entero 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NOTACION2",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // NOTACION2 ::= coma simbolo 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NOTACION2",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // NT$0 ::= 
            {
              Nodo RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo valor = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 //System.out.println("Valor " + valor.getValor());
            parser.Raiz = valor;
            graficarArbol(valor,"arbol" + Integer.toString(parser.contarbol));
            parser.contarbol++;
            //proyecto.Interfaz.list_of_names+=valor;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // DEFEXPR ::= DEFEXPR id flecha EXPRESION NT$0 puntocoma 
            {
              Nodo RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Nodo) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo valor = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFEXPR",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // NT$1 ::= 
            {
              Nodo RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo valor = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 //System.out.println("Valor " + valor.getValor());
            parser.Raiz = valor;
            graficarArbol(valor,"arbol" + Integer.toString(parser.contarbol));
            parser.contarbol++;
            //proyecto.Interfaz.list_of_names+=valor;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // DEFEXPR ::= id flecha EXPRESION NT$1 puntocoma 
            {
              Nodo RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Nodo) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo valor = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFEXPR",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // EXPRESION ::= suma EXPRESION 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		//RESULT=a; 
            //System.out.println("Una o más veces " + a.getValor());
            Nodo nuevaSuma = new Nodo(null, a, "+", parser.contId, " ", "N" , " " , " ", " ");
            parser.contId++;
            RESULT = nuevaSuma;
            nuevaSuma.setFirst(nuevaSuma.getHder().getFirst());
            nuevaSuma.setLast(nuevaSuma.getHder().getLast());
            primeros = nuevaSuma.getFirst();
            ultimos = nuevaSuma.getLast();
            nuevaSuma.setFollow(nuevaSuma.getHder().getLast() + "-" + nuevaSuma.getHder().getFirst());
            siguientes(nuevaSuma.getHder().getLast(),nuevaSuma.getHder().getFirst());
            //siguientes.add(nuevaSuma.getFollow());
            //System.out.println("Follows: " + nuevaSuma.getFollow());
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // EXPRESION ::= mult EXPRESION 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		//RESULT=a; 
            //System.out.println("Cero o más veces " + a.getValor());
            Nodo nuevaMult = new Nodo(null, a, "*", parser.contId, " ", " ", " ", " ", " ");
            parser.contId++;
            RESULT = nuevaMult;
            if(nuevaMult.getHder().getAN() == "AN"){
            nuevaMult.setAN("AN");
            }else{
            nuevaMult.setAN("N");
            }
            nuevaMult.setFirst(nuevaMult.getHder().getFirst());
            nuevaMult.setLast(nuevaMult.getHder().getLast());
            primeros = nuevaMult.getFirst();
            ultimos = nuevaMult.getLast();
            nuevaMult.setFollow(nuevaMult.getHder().getLast() + "-" + nuevaMult.getHder().getFirst());
            siguientes(nuevaMult.getHder().getLast(),nuevaMult.getHder().getFirst());
            //siguientes.add(nuevaMult.getFollow());
            //System.out.println("Follows: " + nuevaMult.getFollow());
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // EXPRESION ::= conc EXPRESION EXPRESION 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		//RESULT= a + b;
            //System.out.println("Concatenacion " + a.getValor() + b.getValor());
            Nodo nuevaConc = new Nodo(a, b, ".", parser.contId, " ", " ", " ", " ", " ");
            parser.contId++;
            RESULT = nuevaConc;
            //System.out.println("Concatenacion " + nuevaConc.getHder().getAN() + "-" + nuevaConc.getHizq().getAN());
            if(nuevaConc.getHder().getAN() == "AN" && nuevaConc.getHizq().getAN() == "AN"){
            nuevaConc.setAN("AN");
            nuevaConc.setFirst(nuevaConc.getHizq().getFirst() + "," +  nuevaConc.getHder().getFirst());
            nuevaConc.setLast(nuevaConc.getHizq().getLast() + "," +  nuevaConc.getHder().getLast());
            primeros = nuevaConc.getFirst();
            ultimos = nuevaConc.getLast();
            }else{
            nuevaConc.setAN("N");
            nuevaConc.setFirst(nuevaConc.getHizq().getFirst());
            nuevaConc.setLast(nuevaConc.getHder().getLast());
            primeros = nuevaConc.getFirst();
            ultimos = nuevaConc.getLast();
            }
            nuevaConc.setFollow(nuevaConc.getHizq().getLast() + "-" + nuevaConc.getHder().getFirst());
            siguientes(nuevaConc.getHizq().getLast(),nuevaConc.getHder().getFirst());
            //siguientes.add(nuevaConc.getFollow());
            //System.out.println("Follows: " + nuevaConc.getFollow());
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // EXPRESION ::= or EXPRESION EXPRESION 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		//RESULT=a + b; 
            //System.out.println("Or " + a.getValor() + b.getValor());
            Nodo nuevaOr = new Nodo(a, b, "\\|", parser.contId, " ", " ", " ", " ", " ");
            parser.contId++;
            RESULT = nuevaOr;
            //System.out.println("Or " + nuevaOr.getHder().getAN() + "-" + nuevaOr.getHizq().getAN());
            if(nuevaOr.getHder().getAN() == "AN" || nuevaOr.getHizq().getAN() == "AN"){
            nuevaOr.setAN("AN");
            }else{
            nuevaOr.setAN("N");
            }
            nuevaOr.setFirst(nuevaOr.getHizq().getFirst() + "," +  nuevaOr.getHder().getFirst());
            nuevaOr.setLast(nuevaOr.getHizq().getLast() + "," +  nuevaOr.getHder().getLast());
            primeros = nuevaOr.getFirst();
            ultimos = nuevaOr.getLast();
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // EXPRESION ::= inter EXPRESION 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		//RESULT=a; 
            //System.out.println("Cero o una vez " + a.getValor() );
            Nodo nuevaInter = new Nodo(null, a, "?", parser.contId, " ", "A", " "," ", " ");
            parser.contId++;
            RESULT = nuevaInter;
            nuevaInter.setFirst(nuevaInter.getHder().getFirst());
            nuevaInter.setLast(nuevaInter.getHder().getLast());
            primeros = nuevaInter.getFirst();
            ultimos = nuevaInter.getLast();
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // NT$2 ::= 
            {
              Nodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
//RESULT=val;
            Nodo nuevoId = new Nodo(null, null, val, parser.contId, Integer.toString(parser.contId - 1), "N" , Integer.toString(parser.contId - 1), Integer.toString(parser.contId - 1), " ");
            hojas.add(Integer.toString(parser.contId - 1) + "-" + val);
            parser.contId++;
            parser.contI++;
            RESULT = nuevoId;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // EXPRESION ::= llaveiz id NT$2 llaveder 
            {
              Nodo RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Nodo) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // EXPRESION ::= cadena 
            {
              Nodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		//RESULT=val;
            Nodo nuevaCad = new Nodo(null, null, val.replace("\"", ""), parser.contId, Integer.toString(parser.contId - 1), "N", Integer.toString(parser.contId - 1), Integer.toString(parser.contId - 1), " ");
            hojas.add(Integer.toString(parser.contId - 1) + "-" + val);
            parser.contId++;
            parser.contI++;
            RESULT = nuevaCad;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // EXPRESION ::= comilla 
            {
              Nodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		//RESULT=val;
            Nodo nuevaCom1 = new Nodo(null, null, val, parser.contId, Integer.toString(parser.contId - 1), "N", Integer.toString(parser.contId - 1), Integer.toString(parser.contId - 1), " ");
            hojas.add(Integer.toString(parser.contId - 1) + "-" + val);
            parser.contId++;
            parser.contI++;
            RESULT = nuevaCom1;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // EXPRESION ::= comilla2 
            {
              Nodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		//RESULT=val;
            Nodo nuevaCom2 = new Nodo(null, null, val, parser.contId, Integer.toString(parser.contId - 1), "N", Integer.toString(parser.contId - 1), Integer.toString(parser.contId - 1), " ");
            hojas.add(Integer.toString(parser.contId - 1) + "-" + val);
            parser.contId++;
            parser.contI++;
            RESULT = nuevaCom2; 
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // EXPRESION ::= salto 
            {
              Nodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		//RESULT=val;
            Nodo nuevoSal = new Nodo(null, null,"\\" + val, parser.contId, Integer.toString(parser.contId - 1), "N", Integer.toString(parser.contId - 1), Integer.toString(parser.contId - 1), " ");
            hojas.add(Integer.toString(parser.contId - 1) + "-" + val);
            parser.contId++;
            parser.contI++;
            RESULT = nuevoSal;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // BLOQUE2 ::= BLOQUE2 porcentaje porcentaje 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE2",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // BLOQUE2 ::= porcentaje 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE2",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // BLOQUE3 ::= DEFCADENA 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE3",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // DEFCADENA ::= DEFCADENA id dpuntos cadena puntocoma 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFCADENA",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // DEFCADENA ::= id dpuntos cadena puntocoma 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFCADENA",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
