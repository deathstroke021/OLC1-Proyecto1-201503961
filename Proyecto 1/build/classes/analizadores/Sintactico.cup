package analizadores;
import java_cup.runtime.*;
import proyecto.*;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;

parser code
{:  

    public static int contId=2;
    public static int contI=0;
    public static int contarbol = 1;
    public static String primeros = ""; 
    public static Nodo Raiz;
    public static void graficarArbol(Nodo act, String nombre){
        FileWriter fichero = null;
        PrintWriter pw = null;
        try {
            fichero = new FileWriter("C:\\Users\\Fernando Armira\\Documents\\" + nombre + ".dot");
            pw = new PrintWriter(fichero);
            pw.println("digraph G{");
            pw.println("rankdir=UD");
            pw.println("concentrate=true");
            pw.println("node[shape=record]");
            pw.println("struct0[ label =\" {N|{" + primeros + "|.|" + (contI + 1) + "}|} \"];");
            pw.println("struct1[ label =\" {N|{" + (contI + 1) + "|#|" + (contI + 1) + "} |" + (contI + 1) + "} \"];");
            pw.println(act.getCodigoInterno());
            pw.println("struct0->struct" + (contId - 1));
            pw.println("struct0->struct1");
            pw.println("}");
            System.out.println("Archivo generado correctamente");
        } catch (Exception e) {
            System.out.println("error, no se realizo el archivo");
        } finally {
            try {
                if (null != fichero) {
                    fichero.close();
                }
            } catch (Exception e2) {
                e2.printStackTrace();
            }
        }
        //para compilar el archivo dot y obtener la imagen
        try {
            //dirección doonde se ecnuentra el compilador de graphviz
            String dotPath = "C:\\Program Files (x86)\\Graphviz2.38\\bin\\dot.exe";
            //dirección del archivo dot
            String fileInputPath = "C:\\Users\\Fernando Armira\\Documents\\" + nombre + ".dot";
            //dirección donde se creara la magen
            String fileOutputPath = "C:\\Users\\Fernando Armira\\Documents\\" +nombre+ ".jpg";
            //tipo de conversón
            String tParam = "-Tjpg";
            String tOParam = "-o";

            String[] cmd = new String[5];
            cmd[0] = dotPath;
            cmd[1] = tParam;
            cmd[2] = fileInputPath;
            cmd[3] = tOParam;
            cmd[4] = fileOutputPath;

            Runtime rt = Runtime.getRuntime();

            rt.exec(cmd);

            contId=2;
            contI=0;
            primeros = "";

        } catch (Exception ex) {
            ex.printStackTrace();
        } finally {
        }
    }
     

    //-----------------------------------------para errores sintacticos-------------------------------------------------------------------------------------------
    public void syntax_error(Symbol s)
    {
        System.err.println("Error Sintactico en la Línea " + (s.right+1) +" Columna "+(s.left+1)+ ". Identificador "+s.value + " no reconocido. Se ha recuperado del error." );
    }
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {
        System.err.println("Error Sintactico en la Línea " + (s.right+1)+ " Columna "+(s.left+1)+". Identificador " +s.value + " no reconocido.");
    }
    //-------------------------------------------------------------------------------------------------------------------------------------------8
:}

action code {:
:}

// terminal [Tipo] listaterminales;
terminal String suma, resta, mult, div, entero, decimal, letra, id, cadena, conj, tld, flecha, coma, puntocoma, porcentaje, dpuntos, llaveiz, llaveder, sconj, conc, or, inter, simbolo, comilla, comilla2, salto;

// no terminal [Tipo] listanoterminales;
non terminal Nodo INICIO, EXPRESION, BLOQUE1, DEFCONJ, DEFEXPR, NOTACION, NOTACION2, BLOQUE2, BLOQUE3, DEFCADENA;

precedence left or;
precedence left conc;
precedence left suma, mult, inter;

start with INICIO;

INICIO::= llaveiz BLOQUE1 BLOQUE2 BLOQUE3 llaveder;

BLOQUE1::= DEFCONJ DEFEXPR;

DEFCONJ::= DEFCONJ conj dpuntos id flecha NOTACION puntocoma 
        |conj dpuntos id flecha NOTACION puntocoma;

NOTACION::= letra sconj letra
        |entero sconj entero
        |simbolo sconj simbolo
        |letra sconj entero
        |letra sconj simbolo
        |entero sconj letra
        |entero sconj simbolo
        |simbolo sconj entero
        |simbolo sconj letra
        |letra NOTACION2
        |entero NOTACION2
        |simbolo NOTACION2;

NOTACION2::= NOTACION2 coma letra
        | NOTACION2 coma entero
        | NOTACION2 coma simbolo
        | coma letra
        | coma entero
        | coma simbolo;

DEFEXPR::= DEFEXPR id flecha EXPRESION:valor {: //System.out.println("Valor " + valor.getValor());
            parser.Raiz = valor;
            graficarArbol(valor,"arbol" + Integer.toString(parser.contarbol));
            parser.contarbol++;
            //proyecto.Interfaz.list_of_names+=valor;
            :} puntocoma
           |id flecha EXPRESION:valor {: //System.out.println("Valor " + valor.getValor());
            parser.Raiz = valor;
            graficarArbol(valor,"arbol" + Integer.toString(parser.contarbol));
            parser.contarbol++;
            //proyecto.Interfaz.list_of_names+=valor;
            :} puntocoma;

EXPRESION ::= suma EXPRESION:a {://RESULT=a; 
            //System.out.println("Una o más veces " + a.getValor());
            Nodo nuevaSuma = new Nodo(null, a, "+", parser.contId, " ", "N" , " " , " ");
            parser.contId++;
            RESULT = nuevaSuma;
            nuevaSuma.setFirst(nuevaSuma.getHder().getFirst());
            nuevaSuma.setLast(nuevaSuma.getHder().getLast());
            primeros = nuevaSuma.getHder().getFirst();
            :} // EXPRESION ::= EXPRESION signcon EXPRESION EXPRESION

            | mult EXPRESION:a {://RESULT=a; 
            //System.out.println("Cero o más veces " + a.getValor());
            Nodo nuevaMult = new Nodo(null, a, "*", parser.contId, " ", " ", " ", " ");
            parser.contId++;
            RESULT = nuevaMult;
            if(nuevaMult.getHder().getAN() == "AN"){
            nuevaMult.setAN("AN");
            }else{
            nuevaMult.setAN("N");
            }
            nuevaMult.setFirst(nuevaMult.getHder().getFirst());
            nuevaMult.setLast(nuevaMult.getHder().getLast());
            primeros = nuevaMult.getHder().getFirst();
            :}

            | conc EXPRESION:a EXPRESION:b {://RESULT= a + b;
            //System.out.println("Concatenacion " + a.getValor() + b.getValor());
            Nodo nuevaConc = new Nodo(a, b, ".", parser.contId, " ", " ", " ", " ");
            parser.contId++;
            RESULT = nuevaConc;
            //System.out.println("Concatenacion " + nuevaConc.getHder().getAN() + "-" + nuevaConc.getHizq().getAN());
            if(nuevaConc.getHder().getAN() == "AN" && nuevaConc.getHizq().getAN() == "AN"){
            nuevaConc.setAN("AN");
            nuevaConc.setFirst(nuevaConc.getHizq().getFirst() + "," +  nuevaConc.getHder().getFirst());
            nuevaConc.setLast(nuevaConc.getHizq().getLast() + "," +  nuevaConc.getHder().getLast());
            primeros = nuevaConc.getHizq().getFirst() + "," +  nuevaConc.getHder().getFirst();
            }else{
            nuevaConc.setAN("N");
            nuevaConc.setFirst(nuevaConc.getHizq().getFirst());
            nuevaConc.setLast(nuevaConc.getHder().getLast());
            primeros = nuevaConc.getHizq().getFirst();
            } 
            :} 

            | or EXPRESION:a EXPRESION:b {://RESULT=a + b; 
            //System.out.println("Or " + a.getValor() + b.getValor());
            Nodo nuevaOr = new Nodo(a, b, "\\|", parser.contId, " ", " ", " ", " ");
            parser.contId++;
            RESULT = nuevaOr;
            //System.out.println("Or " + nuevaOr.getHder().getAN() + "-" + nuevaOr.getHizq().getAN());
            if(nuevaOr.getHder().getAN() == "AN" || nuevaOr.getHizq().getAN() == "AN"){
            nuevaOr.setAN("AN");
            }else{
            nuevaOr.setAN("N");
            }

            nuevaOr.setFirst(nuevaOr.getHizq().getFirst() + "," +  nuevaOr.getHder().getFirst());
            nuevaOr.setLast(nuevaOr.getHizq().getLast() + "," +  nuevaOr.getHder().getLast());
            primeros = nuevaOr.getHizq().getFirst() + "," +  nuevaOr.getHder().getFirst();
            :} 

            | inter EXPRESION:a {://RESULT=a; 
            //System.out.println("Cero o una vez " + a.getValor() );
            Nodo nuevaInter = new Nodo(null, a, "?", parser.contId, " ", "A", " "," ");
            parser.contId++;
            RESULT = nuevaInter;
            nuevaInter.setFirst(nuevaInter.getHder().getFirst());
            nuevaInter.setLast(nuevaInter.getHder().getLast());
            primeros = nuevaInter.getHder().getFirst();
            :}  

            | llaveiz id:val {://RESULT=val;
            Nodo nuevoId = new Nodo(null, null, val, parser.contId, Integer.toString(parser.contId - 1), "N" , Integer.toString(parser.contId - 1), Integer.toString(parser.contId - 1));
            parser.contId++;
            parser.contI++;
            RESULT = nuevoId;
            :} llaveder

            | cadena:val {://RESULT=val;
            Nodo nuevaCad = new Nodo(null, null, val.replace("\"", ""), parser.contId, Integer.toString(parser.contId - 1), "N", Integer.toString(parser.contId - 1), Integer.toString(parser.contId - 1));
            parser.contId++;
            parser.contI++;
            RESULT = nuevaCad;
            :}

            | comilla:val {://RESULT=val;
            Nodo nuevaCom1 = new Nodo(null, null, val, parser.contId, Integer.toString(parser.contId - 1), "N", Integer.toString(parser.contId - 1), Integer.toString(parser.contId - 1));
            parser.contId++;
            parser.contI++;
            RESULT = nuevaCom1;
            :}

            | comilla2:val {://RESULT=val;
            Nodo nuevaCom2 = new Nodo(null, null, val, parser.contId, Integer.toString(parser.contId - 1), "N", Integer.toString(parser.contId - 1), Integer.toString(parser.contId - 1));
            parser.contId++;
            parser.contI++;
            RESULT = nuevaCom2;
            :}

            | salto:val {://RESULT=val;
            Nodo nuevoSal = new Nodo(null, null,"\\" + val, parser.contId, Integer.toString(parser.contId - 1), "N", Integer.toString(parser.contId - 1), Integer.toString(parser.contId - 1));
            parser.contId++;
            parser.contI++;
            RESULT = nuevoSal;
            :}; 

BLOQUE2::= BLOQUE2 porcentaje porcentaje
        | porcentaje;

BLOQUE3::= DEFCADENA;

DEFCADENA::= DEFCADENA id dpuntos cadena puntocoma
        |id dpuntos cadena puntocoma;

/*LID::= LID comaa nombre:name {:App.Aplicacion.list_of_names+=name+"\n";:}
    | nombre:name {:App.Aplicacion.list_of_names+=name+"\n";:};*/

/*
INICIO::= EXPRESION:valor {:
    System.out.println(valor);
    //proyecto.Interfaz.list_of_names+=valor;
:};



EXPRESION ::= suma EXPRESION:a EXPRESION:b {:RESULT=a+b;:} // EXPRESION ::= EXPRESION signcon EXPRESION EXPRESION
            | resta EXPRESION:b EXPRESION:a  {:RESULT=a-b;:}
            | mult EXPRESION:a EXPRESION:b {:RESULT=a*b;
                //addNodo("mult",a,b)
            :} // mult EXPRESION:a EXPRESION:b
            | div EXPRESION:b EXPRESION:a {:RESULT=a/b;:}
            | entero:val {:RESULT=new Double(val);:}
            | decimal:val {:RESULT=new Double(val);:}
            // | asteris EXPRESION
            // | mas EXPRESION
            // | punto EXPRESION EXPRESION <=> EXPRESION punto EXPRESION
            ;
//2+2*2.5+10*2*/